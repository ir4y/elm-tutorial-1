Elm.Calendar = Elm.Calendar || {};
Elm.Calendar.make = function (_elm) {
   "use strict";
   _elm.Calendar = _elm.Calendar || {};
   if (_elm.Calendar.values)
   return _elm.Calendar.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Calendar",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm);
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "NoOp": return model;}
         _U.badCase($moduleName,
         "between lines 33 and 34");
      }();
   });
   var model = 0;
   var view = F2(function (address,
   rows) {
      return A2($Html.table,
      _L.fromArray([$Html$Attributes.$class("table")]),
      _L.fromArray([A2($Html.tbody,
      _L.fromArray([]),
      _L.fromArray([A2($Html.tr,
      _L.fromArray([]),
      _L.fromArray([A2($Html.td,
      _L.fromArray([]),
      _L.fromArray([]))]))]))]));
   });
   var main = $StartApp$Simple.start({_: {}
                                     ,model: model
                                     ,update: update
                                     ,view: view});
   var NoOp = {ctor: "NoOp"};
   _elm.Calendar.values = {_op: _op
                          ,NoOp: NoOp
                          ,view: view
                          ,model: model
                          ,update: update
                          ,main: main};
   return _elm.Calendar.values;
};