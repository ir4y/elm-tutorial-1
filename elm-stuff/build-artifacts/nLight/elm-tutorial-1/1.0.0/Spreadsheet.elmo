Elm.Spreadsheet = Elm.Spreadsheet || {};
Elm.Spreadsheet.make = function (_elm) {
   "use strict";
   _elm.Spreadsheet = _elm.Spreadsheet || {};
   if (_elm.Spreadsheet.values)
   return _elm.Spreadsheet.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Spreadsheet",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var toLiteral$ = F2(function (acc,
   i) {
      return function () {
         switch (i)
         {case 0: return acc;}
         return function () {
            var modulo = A2($Basics._op["%"],
            i - 1,
            26);
            var name = A2($Basics._op["++"],
            $String.fromChar($Char.fromCode(65 + modulo)),
            acc);
            var i$ = (i - modulo) / 26 | 0;
            return A2(toLiteral$,name,i$);
         }();
      }();
   });
   var toLiteral = function (i) {
      return A2(toLiteral$,"",i);
   };
   var header = function (model) {
      return function () {
         var r = A2($Maybe.withDefault,
         $Array.empty,
         A2($Array.get,0,model));
         return A2($Html.tr,
         _L.fromArray([]),
         A2($List._op["::"],
         A2($Html.td,
         _L.fromArray([]),
         _L.fromArray([])),
         $Array.toList(A2($Array.indexedMap,
         F2(function (i,a) {
            return A2($Html.th,
            _L.fromArray([]),
            _L.fromArray([$Html.text(toLiteral(i + 1))]));
         }),
         r))));
      }();
   };
   var extractValue = function (m) {
      return function () {
         switch (m.ctor)
         {case "Left":
            return $Basics.toString(m._0);
            case "Right": return m._0;}
         _U.badCase($moduleName,
         "between lines 40 and 42");
      }();
   };
   var UpdateCell = F3(function (a,
   b,
   c) {
      return {ctor: "UpdateCell"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var cell = F4(function (address,
   i,
   j,
   data) {
      return A2($Html.td,
      _L.fromArray([]),
      _L.fromArray([A2($Html.input,
      _L.fromArray([$Html$Attributes.value(extractValue(data))
                   ,A3($Html$Events.on,
                   "input",
                   $Html$Events.targetValue,
                   function ($) {
                      return $Signal.message(address)(A2(UpdateCell,
                      i,
                      j)($));
                   })]),
      _L.fromArray([]))]));
   });
   var row = F3(function (address,
   i,
   data) {
      return A2($Html.tr,
      _L.fromArray([]),
      A2($List._op["::"],
      A2($Html.th,
      _L.fromArray([]),
      _L.fromArray([$Html.text($Basics.toString(i + 1))])),
      $Array.toList(A2($Array.indexedMap,
      A2(cell,address,i),
      data))));
   });
   var view = F2(function (address,
   model) {
      return A2($Html.table,
      _L.fromArray([$Html$Attributes.$class("table")]),
      _L.fromArray([A2($Html.tbody,
      _L.fromArray([]),
      A2($List.append,
      _L.fromArray([header(model)]),
      $Array.toList(A2($Array.indexedMap,
      row(address),
      model))))]));
   });
   var NoOp = {ctor: "NoOp"};
   var Right = function (a) {
      return {ctor: "Right",_0: a};
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "NoOp": return model;
            case "UpdateCell":
            return function () {
                 var r = A2($Maybe.withDefault,
                 $Array.empty,
                 A2($Array.get,action._0,model));
                 var r$ = A3($Array.set,
                 action._1,
                 Right(action._2),
                 r);
                 return A3($Array.set,
                 action._0,
                 r$,
                 model);
              }();}
         _U.badCase($moduleName,
         "between lines 28 and 35");
      }();
   });
   var Left = function (a) {
      return {ctor: "Left",_0: a};
   };
   var model = $Array.fromList(_L.fromArray([$Array.fromList(A2($List.repeat,
                                            50,
                                            Left(1)))
                                            ,$Array.fromList(A2($List.repeat,
                                            50,
                                            Left(2)))]));
   var main = $StartApp$Simple.start({_: {}
                                     ,model: model
                                     ,update: update
                                     ,view: view});
   _elm.Spreadsheet.values = {_op: _op
                             ,Left: Left
                             ,Right: Right
                             ,NoOp: NoOp
                             ,UpdateCell: UpdateCell
                             ,update: update
                             ,extractValue: extractValue
                             ,cell: cell
                             ,row: row
                             ,toLiteral: toLiteral
                             ,toLiteral$: toLiteral$
                             ,header: header
                             ,view: view
                             ,model: model
                             ,main: main};
   return _elm.Spreadsheet.values;
};