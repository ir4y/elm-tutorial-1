Elm.Spreadsheet = Elm.Spreadsheet || {};
Elm.Spreadsheet.make = function (_elm) {
   "use strict";
   _elm.Spreadsheet = _elm.Spreadsheet || {};
   if (_elm.Spreadsheet.values) return _elm.Spreadsheet.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var toLiteral$ = F2(function (acc,i) {
      toLiteral$: while (true) {
         var _p0 = i;
         if (_p0 === 0) {
               return acc;
            } else {
               var modulo = A2($Basics._op["%"],i - 1,26);
               var name = A2($Basics._op["++"],
               $String.fromChar($Char.fromCode(65 + modulo)),
               acc);
               var i$ = (i - modulo) / 26 | 0;
               var _v1 = name,_v2 = i$;
               acc = _v1;
               i = _v2;
               continue toLiteral$;
            }
      }
   });
   var toLiteral = function (i) {    return A2(toLiteral$,"",i);};
   var header = function (model) {
      var r = A2($Maybe.withDefault,
      $Array.empty,
      A2($Array.get,0,model));
      return A2($Html.tr,
      _U.list([]),
      A2($List._op["::"],
      A2($Html.td,_U.list([]),_U.list([])),
      $Array.toList(A2($Array.indexedMap,
      F2(function (i,a) {
         return A2($Html.th,
         _U.list([]),
         _U.list([$Html.text(toLiteral(i + 1))]));
      }),
      r))));
   };
   var extractValue = function (m) {
      var _p1 = m;
      if (_p1.ctor === "Left") {
            return $Basics.toString(_p1._0);
         } else {
            return _p1._0;
         }
   };
   var UpdateCell = F3(function (a,b,c) {
      return {ctor: "UpdateCell",_0: a,_1: b,_2: c};
   });
   var cell = F4(function (address,i,j,data) {
      return A2($Html.td,
      _U.list([]),
      _U.list([A2($Html.input,
      _U.list([$Html$Attributes.value(extractValue(data))
              ,A3($Html$Events.on,
              "input",
              $Html$Events.targetValue,
              function (_p2) {
                 return A2($Signal.message,address,A3(UpdateCell,i,j,_p2));
              })]),
      _U.list([]))]));
   });
   var row = F3(function (address,i,data) {
      return A2($Html.tr,
      _U.list([]),
      A2($List._op["::"],
      A2($Html.th,
      _U.list([]),
      _U.list([$Html.text($Basics.toString(i + 1))])),
      $Array.toList(A2($Array.indexedMap,A2(cell,address,i),data))));
   });
   var view = F2(function (address,model) {
      return A2($Html.table,
      _U.list([$Html$Attributes.$class("table")]),
      _U.list([A2($Html.tbody,
      _U.list([]),
      A2($List.append,
      _U.list([header(model)]),
      $Array.toList(A2($Array.indexedMap,row(address),model))))]));
   });
   var NoOp = {ctor: "NoOp"};
   var Right = function (a) {    return {ctor: "Right",_0: a};};
   var update = F2(function (action,model) {
      var _p3 = action;
      if (_p3.ctor === "NoOp") {
            return model;
         } else {
            var _p4 = _p3._0;
            var r = A2($Maybe.withDefault,
            $Array.empty,
            A2($Array.get,_p4,model));
            var r$ = A3($Array.set,_p3._1,Right(_p3._2),r);
            return A3($Array.set,_p4,r$,model);
         }
   });
   var Left = function (a) {    return {ctor: "Left",_0: a};};
   var model = $Array.fromList(_U.list([$Array.fromList(A2($List.repeat,
                                       50,
                                       Left(1)))
                                       ,$Array.fromList(A2($List.repeat,50,Left(2)))]));
   var main = $StartApp$Simple.start({model: model
                                     ,update: update
                                     ,view: view});
   return _elm.Spreadsheet.values = {_op: _op
                                    ,Left: Left
                                    ,Right: Right
                                    ,NoOp: NoOp
                                    ,UpdateCell: UpdateCell
                                    ,update: update
                                    ,extractValue: extractValue
                                    ,cell: cell
                                    ,row: row
                                    ,toLiteral: toLiteral
                                    ,toLiteral$: toLiteral$
                                    ,header: header
                                    ,view: view
                                    ,model: model
                                    ,main: main};
};