Elm.Spreadsheet = Elm.Spreadsheet || {};
Elm.Spreadsheet.make = function (_elm) {
   "use strict";
   _elm.Spreadsheet = _elm.Spreadsheet || {};
   if (_elm.Spreadsheet.values) return _elm.Spreadsheet.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var toLiteral$ = F2(function (acc,i) {
      toLiteral$: while (true) {
         var _p0 = i;
         if (_p0 === 0) {
               return acc;
            } else {
               var modulo = A2($Basics._op["%"],i - 1,26);
               var name = A2($Basics._op["++"],
               $String.fromChar($Char.fromCode(65 + modulo)),
               acc);
               var i$ = (i - modulo) / 26 | 0;
               var _v1 = name,_v2 = i$;
               acc = _v1;
               i = _v2;
               continue toLiteral$;
            }
      }
   });
   var toLiteral = function (i) {    return A2(toLiteral$,"",i);};
   var header = function (model) {
      var r = A2($Maybe.withDefault,
      $Array.empty,
      A2($Array.get,0,model.values));
      return A2($Html.tr,
      _U.list([]),
      A2($List._op["::"],
      A2($Html.td,_U.list([]),_U.list([])),
      $Array.toList(A2($Array.indexedMap,
      F2(function (i,a) {
         return A2($Html.th,
         _U.list([]),
         _U.list([$Html.text(toLiteral(i + 1))]));
      }),
      r))));
   };
   var applyOp = F3(function (op,c1,c2) {
      var _p1 = op;
      switch (_p1)
      {case "sum": return c1 + c2;
         case "mul": return c1 * c2;
         case "div": return c1 / c2;
         default: return 0;}
   });
   var Blur = F2(function (a,b) {
      return {ctor: "Blur",_0: a,_1: b};
   });
   var Focus = F2(function (a,b) {
      return {ctor: "Focus",_0: a,_1: b};
   });
   var UpdateCell = F3(function (a,b,c) {
      return {ctor: "UpdateCell",_0: a,_1: b,_2: c};
   });
   var NoOp = {ctor: "NoOp"};
   var Model = F2(function (a,b) {
      return {values: a,focused: b};
   });
   var Right = function (a) {    return {ctor: "Right",_0: a};};
   var update = F2(function (action,model) {
      var _p2 = action;
      switch (_p2.ctor)
      {case "NoOp": return model;
         case "Focus": return _U.update(model,
           {focused: {ctor: "_Tuple2",_0: _p2._0,_1: _p2._1}});
         case "Blur": return _U.update(model,
           {focused: {ctor: "_Tuple2",_0: -1,_1: -1}});
         default: var _p3 = _p2._0;
           var row = A2($Maybe.withDefault,
           $Array.empty,
           A2($Array.get,_p3,model.values));
           var row$ = A3($Array.set,_p2._1,Right(_p2._2),row);
           var values = A3($Array.set,_p3,row$,model.values);
           return _U.update(model,{values: values});}
   });
   var getCellVal = F3(function (model,i,j) {
      var r = A2($Maybe.withDefault,
      $Array.empty,
      A2($Array.get,i,model.values));
      return A2($Maybe.withDefault,Right(""),A2($Array.get,j,r));
   });
   var Left = function (a) {    return {ctor: "Left",_0: a};};
   var evalMatch = F2(function (model,match) {
      var _p4 = match.submatches;
      if (_p4.ctor === "::" && _p4._0.ctor === "Just" && _p4._1.ctor === "::" && _p4._1._0.ctor === "Just" && _p4._1._1.ctor === "::" && _p4._1._1._0.ctor === "Just" && _p4._1._1._1.ctor === "::" && _p4._1._1._1._0.ctor === "Just" && _p4._1._1._1._1.ctor === "::" && _p4._1._1._1._1._0.ctor === "Just" && _p4._1._1._1._1._1.ctor === "[]")
      {
            var j2$ = A2($Result.withDefault,
            0,
            $String.toInt(_p4._1._1._1._1._0._0));
            var i2$ = A2($Result.withDefault,
            0,
            $String.toInt(_p4._1._1._1._0._0));
            var cell2 = A3(getCellVal,model,i2$,j2$);
            var j1$ = A2($Result.withDefault,
            0,
            $String.toInt(_p4._1._1._0._0));
            var i1$ = A2($Result.withDefault,0,$String.toInt(_p4._1._0._0));
            var cell1 = A3(getCellVal,model,i1$,j1$);
            var _p5 = _U.list([cell1,cell2]);
            if (_p5.ctor === "::" && _p5._0.ctor === "Left" && _p5._1.ctor === "::" && _p5._1._0.ctor === "Left" && _p5._1._1.ctor === "[]")
            {
                  return Left(A3(applyOp,_p4._0._0,_p5._0._0,_p5._1._0._0));
               } else {
                  return Right($Basics.toString(_U.list([cell1,cell2])));
               }
         } else {
            return Right("#Error#");
         }
   });
   var evalFormula = F2(function (model,formula) {
      var matches = A3($Regex.find,
      $Regex.AtMost(1),
      $Regex.regex("=(sum|mul|div)\\((\\d+):(\\d+)\\,(\\d+):(\\d+)\\)"),
      formula);
      var _p6 = matches;
      if (_p6.ctor === "::" && _p6._1.ctor === "[]") {
            return A2(evalMatch,model,_p6._0);
         } else {
            return Right(formula);
         }
   });
   var extractValue = F4(function (model,i,j,m) {
      extractValue: while (true) {
         var _p7 = m;
         if (_p7.ctor === "Left") {
               return $Basics.toString(_p7._0);
            } else {
               var _p10 = _p7._0;
               var _p8 = A2($Regex.contains,$Regex.regex("^="),_p10);
               if (_p8 === true) {
                     var _p9 = model.focused;
                     if (_U.eq(i,_p9._0) && _U.eq(j,_p9._1)) return _p10; else {
                           var _v11 = model,
                           _v12 = i,
                           _v13 = j,
                           _v14 = A2(evalFormula,model,_p10);
                           model = _v11;
                           i = _v12;
                           j = _v13;
                           m = _v14;
                           continue extractValue;
                        }
                  } else {
                     return _p10;
                  }
            }
      }
   });
   var cell = F5(function (model,address,i,j,cellVal) {
      return A2($Html.td,
      _U.list([]),
      _U.list([A2($Html.input,
      _U.list([$Html$Attributes.value(A4(extractValue,
              model,
              i,
              j,
              cellVal))
              ,A3($Html$Events.on,
              "input",
              $Html$Events.targetValue,
              function (_p11) {
                 return A2($Signal.message,address,A3(UpdateCell,i,j,_p11));
              })
              ,A2($Html$Events.onFocus,address,A2(Focus,i,j))
              ,A2($Html$Events.onBlur,address,A2(Blur,i,j))]),
      _U.list([]))]));
   });
   var row = F4(function (model,address,i,rowData) {
      return A2($Html.tr,
      _U.list([]),
      A2($List._op["::"],
      A2($Html.th,
      _U.list([]),
      _U.list([$Html.text($Basics.toString(i + 1))])),
      $Array.toList(A2($Array.indexedMap,
      A3(cell,model,address,i),
      rowData))));
   });
   var view = F2(function (address,model) {
      return A2($Html.table,
      _U.list([$Html$Attributes.$class("table")]),
      _U.list([A2($Html.tbody,
      _U.list([]),
      A2($List.append,
      _U.list([header(model)]),
      $Array.toList(A2($Array.indexedMap,
      A2(row,model,address),
      model.values))))]));
   });
   var model = {values: $Array.fromList(_U.list([$Array.fromList(A2($List.repeat,
                                                50,
                                                Left(1)))
                                                ,$Array.fromList(A2($List.repeat,50,Left(2)))]))
               ,focused: {ctor: "_Tuple2",_0: -1,_1: -1}};
   var main = $StartApp$Simple.start({model: model
                                     ,update: update
                                     ,view: view});
   return _elm.Spreadsheet.values = {_op: _op
                                    ,Left: Left
                                    ,Right: Right
                                    ,Model: Model
                                    ,NoOp: NoOp
                                    ,UpdateCell: UpdateCell
                                    ,Focus: Focus
                                    ,Blur: Blur
                                    ,update: update
                                    ,extractValue: extractValue
                                    ,evalFormula: evalFormula
                                    ,evalMatch: evalMatch
                                    ,applyOp: applyOp
                                    ,getCellVal: getCellVal
                                    ,cell: cell
                                    ,row: row
                                    ,toLiteral: toLiteral
                                    ,toLiteral$: toLiteral$
                                    ,header: header
                                    ,view: view
                                    ,model: model
                                    ,main: main};
};